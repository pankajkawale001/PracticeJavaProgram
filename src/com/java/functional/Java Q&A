-- All Sealed java classes or interfaces must use permits keyword. For example:
Sealed Classes: These enable developers to create a restricted class hierarchy, allowing only specified classes to extend a base class.

public sealed class Parent permits Child1, Child2 {
  void parentMethod() {
    System.out.println("from a sealed parent class ");
  }
}


-- Java 8 Features:

	Lambda Expressions: Simplifies Code By Enabling Function Passing As Arguments.
	
	Streams Api: Provides A Powerful Way To Process Sequences Of Data In A Functional Style.
	
	Default Methods: Allows Interfaces To Have Method Implementations, Reducing The Need For Concrete Classes.
	
	Optional Class: Helps In Handling Null Values More Safely, Avoiding Nullpointerexception.
	
	New Date And Time Api: Offers A More Flexible And Reliable Way To Handle Date And Time (Java.Time).

-- Intermediate Operations :
	They return stream. 
	Intermediate operations are lazily loaded.
	They don’t produce end result.
	
	map(), filter(), distinct(), sorted(), limit(), skip()

-- Terminal Operations : 
	They return non-stream values.
    Terminal operations are eagerly loaded.
	They produce end result.
	
	forEach(), toArray(), reduce(), collect(), min(), max(), count(), anyMatch(), allMatch(), noneMatch(), findFirst(), findAny()

-- what is the diff between map and flataMap method
   The main difference between the map and flatMap methods is that map transforms each element in a stream into a single element in a new stream, 
   while flatMap transforms each element into a stream of multiple elements


-- `map` transforms each element in a stream into another form individually, 
	Use `map` for one-to-one transformations 
 
-- `flatMap` transforms each element into a stream and flattens the result. 
	and `flatMap` for one-to-many transformations, such as flattening nested collections

-- Streams are lazy because intermediate operations are not evaluated unless terminal operation is invoked.
	Each intermediate operation creates a new stream, stores the provided operation/function and return the new stream.
	The pipeline accumulates these newly created streams.
	The time when terminal operation is called, traversal of streams begins and the associated function is performed one by one.
	Parallel streams don't evaluate streams 'one by one' (at terminal point). The operations are rather performed simultaneously, depending on the available cores.

-- What is functional interface and why it contains only single abstract method
	A functional interface in Java contains only one abstract method (SAM) so that it can be used with lambda expressions and method references
	allow for the implementation of functional programming concepts in Java
	Promote code reusability
	Facilitate the creation of more concise and expressive code

-- What is marker interface?
	A marker interface in Java is an interface that doesn't contain any methods or constants, and is used to provide information about an object's type at runtime. It's also known as a tagging interface. 
	Serializable: Indicates that objects of a class can be serialized, meaning they can be converted into a byte stream for storage or transmission 
	Cloneable: Allows instances of a class to be cloned 
	Remote: An example of a marker interface 
	
-- What is a Collision?

	Collisions in HashMaps are a normal occurrence due to the nature of hashing.
	Sometimes, different keys can end up with the same hash code. 
	When this happens, the data (key-value pairs) will be assigned to the same box (bucket). This is called a collision.
	A collision happens when two different keys end up with the same hash code and share the same bucket.
	To handle collisions, we use techniques like Separate chaining (storing multiple entries in the same bucket with linked lists) 
	and Open addressing (finding another empty bucket).
	we can handle them efficiently and maintain fast access to our data. By understanding these methods, you can ensure your HashMaps run smoothly even when faced with collisions!

-- Contract between hashCode and equals 

	In Java states that if two objects are considered equal using the equals method, 
	then their hashCode values must also be equal; essentially, if x.equals(y) is true, then x.hashCode() must equal y.hashCode()

-- HashCode() method
	Hashing is a process of converting an object into integer form by using the method hashCode(). It’s necessary to write the hashCode() method properly for better performance of HashMap.

-- equals() method:
	This method is used to check whether 2 objects are equal or not. This method is provided by the Object class. You can override this in your class to provide your implementation. 
	HashMap uses equals() to compare the key to whether they are equal or not. If the equals() method return true, they are equal otherwise not equal. 

-- HashMap Improvements in Java 8
	In Java 8, HashMap replaces the linked list with another useful data structure i.e. binary tree on breaching a certain threshold, which is known as TREEIFY_THRESHOLD. Once this threshold is reached the linked list of Entries is converted to the TreeNodes which reduces the time complexity from O(n) to O(log(n)).

-- TreeMap works well in situations where ordered key-value pairs are necessary since it preserves ascending order. 
	It also only includes distinct components, guaranteeing that every key corresponds to a single value. 
	TreeMap can have more than one null value, even if it cannot have a null key.

-- How Do You Retrieve A Value From A Hashmap?
   By using the keySet() function on a HashMap, you can get a set that contains all of the keys that are kept in the map. Once you have access to each key, 
   you may use a loop to iterate through this Set . Apply the get() method to every key in order to obtain and handle the values that correspond to these keys

-- How Do You Check If A Key Exists In A Hashmap?
   Java's HashMap uses the containsKey(Object key) method to check if a given key is present in the map. 
   This method checks if the HashMap has a mapping for the supplied key when it is called. 
   The function returns true if the key is present in the HashMap and returns false otherwise

-- What Happens If You Put A Null Key Or Value In A Hashmap?
	The HashMap, however, allows any of its values to be null , as well as one of its keys. 
	Keys still have to be unique, so this is why only one can be null . Below is a table that summarizes all the key differences as outlined above
	
--IdentityHashMap?
	IdentityHashMap uses reference equality (==) instead of the equals() method to compare keys.
	This means that two objects are considered equal only if they reference the same memory location.
	IdentityHashMap performs better than HashMap.
	IdentityHashMap uses a simple liner probe hash table.
	Choosing the appropriate data structure depends on the specific requirements of your application and how you want to handle object equality.
	
-- Hashmap internal working? 
	HashMap is work based on key-value pairs.
	HashMap allows one null key and multiple null values.
	HashMap is non-synchronized, It is not-thread safe and can't be shared between many threads without proper synchronization code.
	HashMap is fast.
	Iterator in HashMap is fail-fast.

-- Java HashSet
	HashSet class is non-synchronized, Not-thread safe. 
	Java HashSet class is used to create a collection that uses a hash table for storage. 
	HashSet stores the elements by using a mechanism called hashing.
	HashSet contains unique elements only.
	HashSet allows null value.
	HashSet doesn't maintain the insertion order. Here, elements are inserted on the basis of their hashcode.
	HashSet is the best approach for search operations.
	It inherits the AbstractSet class and implements Set interface.
	The initial default capacity of HashSet is 16, and the load factor is 0.75.

-- Hashtable 
	It is synchronized. It is thread-safe and can be shared with many threads.
	Hashtable doesn't allow any null key or value.
	Hashtable is a legacy class.
	Hashtable is internally synchronized and can't be unsynchronized.
	Enumerator in Hashtable is not fail-fast. 

-- ConcurrentHashMap 
	It is an enhancement of HashMap as we know that while dealing with Threads 
	in our application HashMap is not a good choice because performance-wise HashMap is not up to the mark.
	ConcurrentHashMap is a thread-safe implementation of the Map interface in Java, which means multiple threads can access it simultaneously without any synchronization issues.
	One of the key features of the ConcurrentHashMap is that it provides fine-grained locking, 
	meaning that it locks only the portion of the map being modified, rather than the entire map.

	ConcurrentHashMap class is synchronized and thread-safe i.e. multiple threads can operate on a single object without any complications.
	At a time any number of threads are applicable for a read operation without locking the ConcurrentHashMap object which is not there in HashMap.
	In ConcurrentHashMap, the Object is divided into a number of segments according to the concurrency level.
	The default concurrency-level of ConcurrentHashMap is 16.
	In ConcurrentHashMap, at a time any number of threads can perform retrieval operation but for updated in the object, 
	the thread must lock the particular segment in which the thread wants to operate. 
	This type of locking mechanism is known as Segment locking or bucket locking. Hence at a time, 16 update operations can be performed by threads.
	Inserting null objects is not possible in ConcurrentHashMap as a key or value.

--In Java, fail-fast and fail-safe are approaches to handling errors in a system. 
	Fail-fast systems stop immediately when an error occurs, while    
	fail-safe systems try to recover and continue.
	fail-safe are approaches ensure the error caught immediatly

-- Fail-fast
	Definition: Stops immediately when an error occurs 
	Goal: Prevents further damage and maintains system integrity 
	Benefits: Immediate debugging, lower risk of cascading failures, and quicker detection and resolution of bugs 
	Example: Java's null produces a NullPointerException that fails the code instantly 

-- Fail-safe
	Definition: Continues to operate even when errors occur 
	Goal: Provides uninterrupted service and may attempt to recover from errors 
	Benefits: Handles errors gracefully, making them better suited for mission-critical systems and volatile environments 
	Example: JavaScript uses “undefined” which can propagate through the system 

-- Rules for creating Java constructor
    There are two rules defined for the constructor.

-Constructor name must be the same as its class name
    A Constructor must have no explicit return type
	A Java constructor cannot be abstract, static, final, and synchronized

-- Java throw Keyword
   The "throw" keyword in Java is used to explicitly throw an exception. 
   It disrupts the normal flow of the program by transferring control to the nearest catch block that can handle the thrown exception. 
   When an exception occurs within a method, the method creates an exception object and throws it using the "throw" keyword.

-- Java throws Keyword
   On the other hand, the "throws" clause is used in method signatures to indicate that the method may throw certain types 
   of exceptions during its execution. It doesn't actually throw the exception; 
   instead, it declares that the method may throw exceptions of specified types, thereby alerting the caller to handle them appropriately.

-If hashcode of two objects are same in java
	It is possible for two different objects to have the same hashcode. This is known as a hash collision.
	When two unequal objects have the same hash value, this causes a collision in the hash table, 
	because both objects want to be in the same slot (sometimes called a bucket). The hash algorithm must resolve such collisions.
	1. Look for the next empty slot in the hash table and put the object there. 
	Pros: easy to implement, cons: can lead to clustering of objects and degrade performance, capacity may be exceeded
	
-- How to create Immutable class in Java?
	Immutable class in java means that once an object is created, we cannot change its content. 
	In Java, all the wrapper classes (like Integer, Boolean, Byte, Short) and String class is immutable
	The class must be declared as final so that child classes can’t be created.
	Data members in the class must be declared private so that direct access is not allowed.
	Data members in the class must be declared as final so that we can’t change the value of it after object creation.

-- why it is use of primitive data type in java
   Java includes primitive types primarily for performance and memory efficiency. 
   Primitives are much faster and use less memory than objects because they store their values directly in memory and don't require the overhead associated with objects, 
   such as metadata for class type and garbage collection.


-- New and old Garbage collection?
	How do the three generations interact with / relate to each other?
	All objects, except for large ones, are first allocated to the young generation. 
	If an object remains alive after x number of garbage collection cycles, it gets promoted to the old/tenured generation. 
	Hence, we can say that the young generation contains short lived objects, while the old generation contains objects that will have a long life. 
	The permanent generation does not interact with the other two generations. 

-- finalize() method in Java is used to perform cleanup tasks on an object before it's garbage collected: 
	Close resources: Close external resources like files or network connections
	Release native resources: Prevent leaks by releasing native resources
	Implement custom cleanup logic: Define custom cleanup logic
	Profile and debug: Check when the garbage collector reclaims objects.

	* However, as of Java 9, finalize() has been deprecated in favor of more modern resource management techniques 
	like try-with-resources. Some say that the code you put in finalize() is often buggy or useless, and that the garbage collector is smart enough to do the job itself.

-- OutOfMemoryError What Is a Memory Leak
	A Memory Leak is a situation where there are objects present in the heap that are no longer used, 
	but the garbage collector is unable to remove them from memory, and therefore, they’re unnecessarily maintained.
	A memory leak is bad because it blocks memory resources and degrades system performance over time. 
	If not dealt with, the application will eventually exhaust its resources, finally terminating with a fatal java.lang.OutOfMemoryError.

	There are two different types of objects that reside in Heap memory, referenced and unreferenced. 
	Referenced objects are those that still have active references within the application, whereas unreferenced objects don’t have any active references.

	The garbage collector removes unreferenced objects periodically, but it never collects the objects that are still being referenced. This is where memory leaks can occur:

	Memory Leak Through static Fields
	Through Unclosed Resources
	Improper equals() and hashCode() Implementations
	
-- What Happens When There Is Not Enough Heap Space to Accommodate Storage of New Objects?
	If there is no memory space for creating a new object in Heap, Java Virtual Machine throws OutOfMemoryError or more specifically java.lang.OutOfMemoryError heap space.

-- ClassNotFoundException:
	When it occurs:
	This exception is thrown when the Java Virtual Machine (JVM) cannot find a class that your code is trying to load at runtime. This can happen if:
	The class file is not present in the classpath.
	You are trying to load a class using its fully qualified name (e.g., Class.forName("com.example.MyClass")), but the class does not exist.
	You are using reflection to dynamically load a class that is not available.
	How to fix:
	Make sure the required JAR file containing the class is included in your project's classpath.
	Double-check the fully qualified name of the class you are trying to load.

-- NoSuchMethodError:
	When it occurs:
	This error is thrown when the JVM cannot find a method with the specified signature in a class that is already loaded. This can happen if:
	You are calling a method that does not exist in the class.
	You are calling a method with the wrong number or types of arguments.
	You are trying to call a method on an object that is not of the correct type.
	You are using a version of a library that is incompatible with the version your code was compiled against.
	How to fix:
	Verify that the method you are calling exists in the class with the correct signature.
	Check the types of arguments you are passing to the method.
	Make sure you are working with the correct object type.
	Ensure that you are using compatible versions of libraries.

--Shutdown Hooks are a special construct that allows developers to plug in a piece of code to be executed when the JVM is shutting down. 

Can we create object of interface in Java?
No

id          name                 managerId
----------- -------------------- -----------
1           Spartacus            NULL
2           Spartacus            1

select e.name
from employees as e 
left outer join public.employees as e1 on e.id = e1."managerId"
where e1.id IS NULL


-- What Is Method Overriding In Java?

-- What Does The Wait() Method Do In Java, And How Is It Used In Thread Synchronization?
   In java, synchronized methods and blocks allow only one thread to acquire the lock on a resource at a time. 
   So, when wait() method is called by a thread, then it gives up the lock on that resource 
   and goes to sleep until some other thread enters the same monitor and invokes the notify() or notifyAll() method

-- What Is The Purpose Of The Join() Method In Java Threading?
   The join() method will keep waiting if the referenced thread is blocked or takes too long to process. 
   This can become an issue as the calling thread will become non-responsive. 
   To handle these situations, we use overloaded versions of the join() method that allow us to specify a timeout period.

-- How Do Microservices Communicate With Each Other?
	Synchronous communication
	API calls: Microservices can call APIs exposed by other services using protocols like HTTP or gRPC.
	RESTful APIs: A common way for microservices to communicate using HTTP/S protocols.
	GraphQL: A widespread method for synchronous communication that uses similar protocols as REST.
	Asynchronous communication
	Messaging systems: Microservices can send and receive messages through a queue.
	Event-driven architecture: Microservices generate and consume events in the form of messages.
	Publish/Subscribe messaging: A microservice broadcasts a message to a topic that other microservices can subscribe to.
	Other communication methods
	API Gateway: Centralizes security, scalability, and monitoring logic.
	Orchestration: A central component manages and coordinates interactions between microservices.
	Event-bus or message broker system: Publishes events between multiple microservices.

-- What Is The Role Of An Api Gateway In Microservices?
   In a microservices architecture, an API Gateway acts as a single entry point for client requests, routing them to the appropriate backend microservices, 
   aggregating data from multiple services if necessary, and returning a unified response to the client, 
   essentially hiding the complexity of the underlying microservices by providing a simplified interface for interaction and managing tasks like authentication, 
   rate limiting, and protocol translation.

-- What Is Service Discovery In Microservices?

-- What Are Some Java Frameworks Commonly Used For Microservices?

-- How Is Scalability Achieved In Microservices?
   Scalability in microservices is primarily achieved through horizontal scaling, where individual microservices can be independently
   scaled by adding more instances to handle increased load, allowing for flexible resource allocation and high availability by distributing traffic across multiple service replicas, 
   often facilitated by load balancers and container orchestration platforms like Kubernetes; 
   this approach enables efficient scaling of specific services based on their individual demand rather than scaling the entire application as a single unit.

-- What Is The Role Of Docker In Microservices?

-- How Are Microservices Monitored?

	Performance metrics: Monitoring tools collect and monitor performance metrics from various components, such as CPU usage, memory utilization, network traffic, and response times of individual microservices. This helps track the overall health and system performance.
	Resource utilization: Monitoring tools keep an eye on resource consumption by microservices and infrastructure components. This includes monitoring CPU, memory, disk usage, and network bandwidth to ensure efficient resource allocation.
	Error rates and failure analysis: The tools track error rates, status codes, and error messages from microservices. This allows for quick detection of anomalies and potential issues, helping developers pinpoint failures and troubleshoot them promptly.
	Latency and throughput: Monitoring tools measure the time it takes for a microservice request to be processed by microservices and the rate at which those requests are handled.
	Alerts and thresholds: If any metric exceeds a specified threshold, the system triggers alerts, so IT teams can take immediate action.
	Logs and traces: Some monitoring tools integrate with logging systems to capture and analyze logs from multiple services. Tracing capabilities allow developers to follow the flow of a request across various microservices.
	API monitoring: These tools can monitor the interactions between different microservices and APIs, ensuring that API calls are successful (and letting you know when they are not) and identifying potential bottlenecks in API communication.
	Container monitoring: Monitoring tools can capture the unique environmental issues in container health, such as resource utilization and performance.
	Service mesh observability: For microservices architectures using service mesh, the monitoring tools can provide insights into the communication and interactions between microservices within the mesh.
	Application performance monitoring (APM): APM tools give attention to the code-level performance of individual microservices, to make it easier for developers to identify performance bottlenecks.
	Custom metrics: Advanced monitoring tools recognize that all those categories sometimes are not enough. They let you define and collect custom metrics specific to your microservices architecture.

	Tools
	Prometheus: The open-source monitoring and alerting toolkit is specifically designed for distributed systems and thus suitable for microservices monitoring.
	
	Grafana: Grafana is known for its visualizations and dashboards, which help navigate data collections and put them in a form that humans understand.
	
	Datadog: Datadog offers real-time alerts, distributed tracing, and APM, with features that promise full visibility into a microservices ecosystem.
	
	Dynatrace: This monitoring tool offers automatic application discovery and observability for microservices environments.
	
	Architect.io: This tool is a favorite for robust testing and monitoring capabilities in larger organizations, with a comprehensive view of microservices architectures.
	
	Lumigo: Lumigo offers end-to-end visibility, real-time debugging, and cost monitoring, and it gives particular attention to serverless architectures.
	
	AppDynamics: With its real-time visibility, outlier detection, network performance monitoring, and Docker and Kubernetes monitoring, this may be suitable for tracking events in a large, complex architecture.
	
	Instana: This tool promises complete observability for an entire microservices environment.
	
	Uptrace: With its emphasis on visibility into performance data and integration with popular programming languages and frameworks, 
	Uptrace helps developers identify, diagnose, and resolve performance issues in a microservices ecosystem.